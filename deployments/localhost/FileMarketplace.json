{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commissionFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FileMarketplace__BoughtFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FileMarketplace__FileTokenAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FileMarketplace__FileTokenNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCommissionFee",
          "type": "uint256"
        }
      ],
      "name": "FileMarketplace__InvalidCommissionFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFileMarketplaceOwner",
          "type": "address"
        }
      ],
      "name": "FileMarketplace__InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FileMarketplace__ListFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FileMarketplace__NoProceedsForWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "FileMarketplace__NotEnoughFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "FileMarketplace__NotFileTokenCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FileMarketplace__WithdrawFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCommissionFee",
          "type": "uint256"
        }
      ],
      "name": "CommissionFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fileTokenOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fileToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fileName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fileSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "FileTokenBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fileTokenOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fileToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fileName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fileSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "FileTokenListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fileTokenOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fileToken",
          "type": "address"
        }
      ],
      "name": "FileTokenListingCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFileMarketplaceOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProceedsWithdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fileTokenAddress",
          "type": "address"
        }
      ],
      "name": "buyFileToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fileTokenAddress",
          "type": "address"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCommissionFee",
          "type": "uint256"
        }
      ],
      "name": "changeCommissionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFileMarketplaceOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commissionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCommissionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fileTokenOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fileToken",
          "type": "address"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fileTokenOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fileToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "fileName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fileSymbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct FileMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fileTokenAddress",
          "type": "address"
        }
      ],
      "name": "listFileToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawCommissionFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe403fa6ee20212f65fee5ed186d2f3ef75ecdf404e57e654704e21451587016a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2337243",
    "logsBloom": "0x
    "blockHash": "0x3fc64334a57b4ad0539c0de2132b75571db031b57820e9bff6de87b04c14cf21",
    "transactionHash": "0xe403fa6ee20212f65fee5ed186d2f3ef75ecdf404e57e654704e21451587016a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xe403fa6ee20212f65fee5ed186d2f3ef75ecdf404e57e654704e21451587016a",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3fc64334a57b4ad0539c0de2132b75571db031b57820e9bff6de87b04c14cf21"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "2337243",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e846a97e3e79638d511a58b6ebe772d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FileMarketplace__BoughtFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FileMarketplace__FileTokenAlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FileMarketplace__FileTokenNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCommissionFee\",\"type\":\"uint256\"}],\"name\":\"FileMarketplace__InvalidCommissionFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFileMarketplaceOwner\",\"type\":\"address\"}],\"name\":\"FileMarketplace__InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FileMarketplace__ListFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FileMarketplace__NoProceedsForWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"FileMarketplace__NotEnoughFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"FileMarketplace__NotFileTokenCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FileMarketplace__WithdrawFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCommissionFee\",\"type\":\"uint256\"}],\"name\":\"CommissionFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fileTokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fileToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fileSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"FileTokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fileTokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fileToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fileSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"FileTokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fileTokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fileToken\",\"type\":\"address\"}],\"name\":\"FileTokenListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFileMarketplaceOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProceedsWithdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fileTokenAddress\",\"type\":\"address\"}],\"name\":\"buyFileToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fileTokenAddress\",\"type\":\"address\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCommissionFee\",\"type\":\"uint256\"}],\"name\":\"changeCommissionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFileMarketplaceOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fileTokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fileToken\",\"type\":\"address\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fileTokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fileToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fileSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct FileMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fileTokenAddress\",\"type\":\"address\"}],\"name\":\"listFileToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCommissionFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FileMarketplace.sol\":\"FileMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/FileMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./interfaces/IFileToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n// This contract is for file trading\\n// The owner of the file can list the fileToken for those who want to buy to mint the NFT for the file\\n// The owner of the file can also cancel the listing\\n// Provide an interface where users can see details about the file and mint NFTs directly from the `FileToken` contract by paying the minting fee.\\n// This contract can track the ownership and transaction history of each NFT minted from the `FileToken` contracts.\\n// This information can be used to display the history and provenance of each file token.\\n// This contract owner will earn a commission\\n// -> the owner of this contract can set the commission fee:\\n// -> the owner of this contract can withdraw the commission fee\\n// -> the owner of this contract can change the commission fee\\n// -> the owner of this contract can change the owner of the contract\\n// This contract only deployed by the marketplace owner\\n// Those fileToken owners can call the listFileToken function to list their fileToken contracts\\n// Those fileToken owners can call the cancelListing function to cancel the listing\\n// Only the owner of the marketplace can interact with other functions\\n\\n// ReentrancyGuard is needed to prevent reentrancy attack\\n\\ncontract FileMarketplace is Ownable, ReentrancyGuard {\\n    struct Listing {\\n        address fileTokenOwner;\\n        address fileToken;\\n        string fileName;\\n        string fileSymbol;\\n        uint256 price;\\n    }\\n\\n    error FileMarketplace__NotFileTokenCreator(address caller, address creator);\\n    error FileMarketplace__NotEnoughFee(uint256 fee, uint256 price);\\n    error FileMarketplace__InvalidCommissionFee(uint256 newCommissionFee);\\n    error FileMarketplace__NoProceedsForWithdraw();\\n    error FileMarketplace__WithdrawFailed();\\n    error FileMarketplace__BoughtFailed();\\n    error FileMarketplace__ListFailed();\\n    error FileMarketplace__InvalidOwner(address newFileMarketplaceOwner);\\n    error FileMarketplace__FileTokenNotListed();\\n    error FileMarketplace__FileTokenAlreadyListed();\\n\\n    event FileTokenListed(\\n        address indexed fileTokenOwner,\\n        address fileToken,\\n        string fileName,\\n        string fileSymbol,\\n        uint256 price\\n    );\\n    event FileTokenListingCancelled(\\n        address indexed fileTokenOwner,\\n        address fileToken\\n    );\\n    event FileTokenBought(\\n        address indexed fileTokenOwner,\\n        address fileToken,\\n        string fileName,\\n        string fileSymbol,\\n        address buyer\\n    );\\n    event CommissionFeeChanged(uint256 newCommissionFee);\\n    event ProceedsWithdrawn(uint256 amount);\\n    event OwnerChanged(address newFileMarketplaceOwner);\\n\\n    address private fileMarketplaceOwner;\\n    uint256 public commissionFee;\\n    mapping(address => mapping(address => Listing)) private listings; // one owner can have multiple listings => fileTokenOwner => fileToken => Listing\\n\\n    modifier isListed(address fileTokenOwnerAddress, address fileTokenAddress) {\\n        if (\\n            listings[fileTokenOwnerAddress][fileTokenAddress].fileToken ==\\n            address(0)\\n        ) {\\n            revert FileMarketplace__FileTokenNotListed();\\n        }\\n        _;\\n    }\\n\\n    modifier isNotListed(\\n        address fileTokenOwnerAddress,\\n        address fileTokenAddress\\n    ) {\\n        if (\\n            listings[fileTokenOwnerAddress][fileTokenAddress].fileToken !=\\n            address(0)\\n        ) {\\n            revert FileMarketplace__FileTokenAlreadyListed();\\n        }\\n        _;\\n    }\\n\\n    constructor(uint256 _commissionFee) Ownable(msg.sender) {\\n        fileMarketplaceOwner = msg.sender;\\n        commissionFee = _commissionFee;\\n    }\\n\\n    function listFileToken(\\n        address fileTokenAddress\\n    )\\n        public\\n        payable\\n        isNotListed(\\n            IFileToken(fileTokenAddress).creatorOfContract(),\\n            fileTokenAddress\\n        )\\n        nonReentrant\\n    {\\n        if (msg.sender != IFileToken(fileTokenAddress).creatorOfContract()) {\\n            revert FileMarketplace__NotFileTokenCreator(\\n                msg.sender,\\n                IFileToken(fileTokenAddress).creatorOfContract()\\n            );\\n        }\\n\\n        if (commissionFee > msg.value) {\\n            revert FileMarketplace__NotEnoughFee(msg.value, commissionFee);\\n        }\\n\\n        (bool success, ) = fileMarketplaceOwner.call{value: commissionFee}(\\\"\\\");\\n        if (!success) {\\n            revert FileMarketplace__ListFailed();\\n        }\\n\\n        listings[msg.sender][fileTokenAddress] = Listing({\\n            fileTokenOwner: msg.sender,\\n            fileToken: fileTokenAddress,\\n            fileName: IFileToken(fileTokenAddress).getFileName(),\\n            fileSymbol: IFileToken(fileTokenAddress).getFileSymbol(),\\n            price: IFileToken(fileTokenAddress).getMintFee()\\n        });\\n\\n        emit FileTokenListed(\\n            msg.sender,\\n            fileTokenAddress,\\n            listings[msg.sender][fileTokenAddress].fileName,\\n            listings[msg.sender][fileTokenAddress].fileSymbol,\\n            listings[msg.sender][fileTokenAddress].price\\n        );\\n    }\\n\\n    function cancelListing(\\n        address fileTokenAddress\\n    )\\n        public\\n        isListed(\\n            IFileToken(fileTokenAddress).creatorOfContract(),\\n            fileTokenAddress\\n        )\\n    {\\n        if (msg.sender != IFileToken(fileTokenAddress).creatorOfContract()) {\\n            revert FileMarketplace__NotFileTokenCreator(\\n                msg.sender,\\n                IFileToken(fileTokenAddress).creatorOfContract()\\n            );\\n        }\\n\\n        delete listings[msg.sender][fileTokenAddress];\\n\\n        emit FileTokenListingCancelled(msg.sender, fileTokenAddress);\\n    }\\n\\n    function buyFileToken(\\n        address fileTokenAddress\\n    )\\n        public\\n        payable\\n        isListed(\\n            IFileToken(fileTokenAddress).creatorOfContract(),\\n            fileTokenAddress\\n        )\\n        nonReentrant\\n    {\\n        Listing memory listing = listings[\\n            IFileToken(fileTokenAddress).creatorOfContract()\\n        ][fileTokenAddress];\\n        if (listing.price > msg.value) {\\n            revert FileMarketplace__NotEnoughFee(msg.value, listing.price);\\n        }\\n\\n        // call the receive function of the fileToken contract and it will automatically mint the NFT\\n        (bool success, ) = fileTokenAddress.call{value: msg.value}(\\\"\\\");\\n        if (!success) {\\n            revert FileMarketplace__BoughtFailed();\\n        }\\n\\n        emit FileTokenBought(\\n            IFileToken(fileTokenAddress).creatorOfContract(),\\n            listing.fileToken,\\n            listing.fileName,\\n            listing.fileSymbol,\\n            msg.sender\\n        );\\n    }\\n\\n    function changeCommissionFee(uint256 newCommissionFee) public onlyOwner {\\n        if (newCommissionFee < 0) {\\n            revert FileMarketplace__InvalidCommissionFee(newCommissionFee);\\n        }\\n        commissionFee = newCommissionFee;\\n        emit CommissionFeeChanged(newCommissionFee);\\n    }\\n\\n    function withdrawCommissionFee() public payable onlyOwner {\\n        if (address(this).balance <= 0) {\\n            revert FileMarketplace__NoProceedsForWithdraw();\\n        }\\n        uint256 balance = address(this).balance;\\n        (bool success, ) = fileMarketplaceOwner.call{value: balance}(\\\"\\\");\\n        if (!success) {\\n            revert FileMarketplace__WithdrawFailed();\\n        }\\n        emit ProceedsWithdrawn(balance);\\n    }\\n\\n    function changeOwner(address newFileMarketplaceOwner) public onlyOwner {\\n        if (newFileMarketplaceOwner == address(0)) {\\n            revert FileMarketplace__InvalidOwner(newFileMarketplaceOwner);\\n        }\\n        fileMarketplaceOwner = newFileMarketplaceOwner;\\n        emit OwnerChanged(newFileMarketplaceOwner);\\n    }\\n\\n    function getCommissionFee() public view returns (uint256) {\\n        return commissionFee;\\n    }\\n\\n    function getListing(\\n        address fileTokenOwner,\\n        address fileToken\\n    ) public view returns (Listing memory) {\\n        return listings[fileTokenOwner][fileToken];\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x4c88c9af231d872c71a1b52fc14d00194c9ab8d285f50aa83b9fc889073b46d5\",\"license\":\"MIT\"},\"contracts/interfaces/IFileToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IFileToken {\\n    // Function to mint an NFT for a file\\n    function mintNFT(address _to) external payable;\\n\\n    // Function to change the minting fee\\n    function changeMintFee(uint256 newMintFee) external;\\n\\n    // Function to withdraw the contract's balance\\n    function withdraw() external;\\n\\n    // Function to get the token URI of a minted NFT\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    // Function to get the minting fee\\n    function getMintFee() external view returns (uint256);\\n\\n    // Fucntion to get the file name\\n    function getFileName() external view returns (string memory);\\n\\n    // Function to get the file symbol\\n    function getFileSymbol() external view returns (string memory);\\n\\n    // Function to get the creator of the contract\\n    function creatorOfContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd1fe8a283b17b13f0bf8dee5dc236283140ee610cf880e8c610ca47c1268dd31\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a5738038062002a57833981810160405281019062000037919062000219565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a4919062000290565b60405180910390fd5b620000be816200011560201b60201c565b506001808190555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060038190555050620002ad565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620001f381620001de565b8114620001ff57600080fd5b50565b6000815190506200021381620001e8565b92915050565b600060208284031215620002325762000231620001d9565b5b6000620002428482850162000202565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000278826200024b565b9050919050565b6200028a816200026b565b82525050565b6000602082019050620002a760008301846200027f565b92915050565b61279a80620002bd6000396000f3fe6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b1461016e5780639d7d496e14610199578063a6f9dae1146101c4578063b369f6ad146101ed578063b986eaf01461022a578063f2fde38b14610246576100b2565b806307b3acf1146100b45780631cf196df146100be5780634724da6f146100e757806369c27de0146101105780636fb1eb0c1461012c578063715018a614610157576100b2565b366100b257005b005b6100bc61026f565b005b3480156100ca57600080fd5b506100e560048036038101906100e09190611dee565b6103b5565b005b3480156100f357600080fd5b5061010e60048036038101906101099190611e79565b610444565b005b61012a60048036038101906101259190611e79565b61084f565b005b34801561013857600080fd5b506101416110f3565b60405161014e9190611eb5565b60405180910390f35b34801561016357600080fd5b5061016c6110f9565b005b34801561017a57600080fd5b5061018361110d565b6040516101909190611edf565b60405180910390f35b3480156101a557600080fd5b506101ae611136565b6040516101bb9190611eb5565b60405180910390f35b3480156101d057600080fd5b506101eb60048036038101906101e69190611e79565b611140565b005b3480156101f957600080fd5b50610214600480360381019061020f9190611efa565b611234565b6040516102219190612065565b60405180910390f35b610244600480360381019061023f9190611e79565b6114a5565b005b34801561025257600080fd5b5061026d60048036038101906102689190611e79565b611ac4565b005b610277611b4a565b600047116102b1576040517f4a247baf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004790506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516102fe906120b8565b60006040518083038185875af1925050503d806000811461033b576040519150601f19603f3d011682016040523d82523d6000602084013e610340565b606091505b505090508061037b576040517f6323686a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7e85f56592462784083e828817207817f9a8413860eb3c60e01ba90ce6f925d9826040516103a99190611eb5565b60405180910390a15050565b6103bd611b4a565b600081101561040357806040517fc6750bbc0000000000000000000000000000000000000000000000000000000081526004016103fa9190611eb5565b60405180910390fd5b806003819055507facf4d78b53f9d63cbd76ccae2aa87cc5fb45ebcb8c9bcd834dbd31b1be0bdafa816040516104399190611eb5565b60405180910390a150565b8073ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b391906120e2565b81600073ffffffffffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105b9576040517ff9fd269300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610604573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062891906120e2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070757338373ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca91906120e2565b6040517ff68670150000000000000000000000000000000000000000000000000000000081526004016106fe92919061210f565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006107e29190611cec565b6003820160006107f29190611cec565b600482016000905550503373ffffffffffffffffffffffffffffffffffffffff167f8eb13a872c0fa17489b7475219eb593e9b14b7a9f8684115ec29253460a6a8ff846040516108429190611edf565b60405180910390a2505050565b8073ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be91906120e2565b81600073ffffffffffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109c4576040517f43c971c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109cc611bd1565b8273ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b91906120e2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b1a57338373ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610add91906120e2565b6040517ff6867015000000000000000000000000000000000000000000000000000000008152600401610b1192919061210f565b60405180910390fd5b346003541115610b6557346003546040517ffb6232f6000000000000000000000000000000000000000000000000000000008152600401610b5c929190612138565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600354604051610baf906120b8565b60006040518083038185875af1925050503d8060008114610bec576040519150601f19603f3d011682016040523d82523d6000602084013e610bf1565b606091505b5050905080610c2c576040517f60dcb70a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1663fcf6c23c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ce39190612287565b81526020018573ffffffffffffffffffffffffffffffffffffffff16637d3dd5516040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d5c9190612287565b81526020018573ffffffffffffffffffffffffffffffffffffffff16637a5caab36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd091906122e5565b815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019081610ef2919061251e565b506060820151816003019081610f08919061251e565b50608082015181600401559050503373ffffffffffffffffffffffffffffffffffffffff167f4837445f6f627fb9b83ad5ff3d0a0af15d453e5044ead6a4c3d67183c25af04085600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401546040516110dd9493929190612685565b60405180910390a2506110ee611c17565b505050565b60035481565b611101611b4a565b61110b6000611c20565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b611148611b4a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111b957806040517f1c28b37b0000000000000000000000000000000000000000000000000000000081526004016111b09190611edf565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36816040516112299190611edf565b60405180910390a150565b61123c611d2c565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461137f90612341565b80601f01602080910402602001604051908101604052809291908181526020018280546113ab90612341565b80156113f85780601f106113cd576101008083540402835291602001916113f8565b820191906000526020600020905b8154815290600101906020018083116113db57829003601f168201915b5050505050815260200160038201805461141190612341565b80601f016020809104026020016040519081016040528092919081815260200182805461143d90612341565b801561148a5780601f1061145f5761010080835404028352916020019161148a565b820191906000526020600020905b81548152906001019060200180831161146d57829003601f168201915b50505050508152602001600482015481525050905092915050565b8073ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151491906120e2565b81600073ffffffffffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361161a576040517ff9fd269300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611622611bd1565b6000600460008573ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611673573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169791906120e2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546117d590612341565b80601f016020809104026020016040519081016040528092919081815260200182805461180190612341565b801561184e5780601f106118235761010080835404028352916020019161184e565b820191906000526020600020905b81548152906001019060200180831161183157829003601f168201915b5050505050815260200160038201805461186790612341565b80601f016020809104026020016040519081016040528092919081815260200182805461189390612341565b80156118e05780601f106118b5576101008083540402835291602001916118e0565b820191906000526020600020905b8154815290600101906020018083116118c357829003601f168201915b5050505050815260200160048201548152505090503481608001511115611944573481608001516040517ffb6232f600000000000000000000000000000000000000000000000000000000815260040161193b929190612138565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff163460405161196a906120b8565b60006040518083038185875af1925050503d80600081146119a7576040519150601f19603f3d011682016040523d82523d6000602084013e6119ac565b606091505b50509050806119e7576040517f8421543500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5691906120e2565b73ffffffffffffffffffffffffffffffffffffffff167fffc1a05fed963bf870689da19756ad79b1fbb83e344ea31fdd528ec62293004a83602001518460400151856060015133604051611aad9493929190612711565b60405180910390a25050611abf611c17565b505050565b611acc611b4a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b3e5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611b359190611edf565b60405180910390fd5b611b4781611c20565b50565b611b52611ce4565b73ffffffffffffffffffffffffffffffffffffffff16611b7061110d565b73ffffffffffffffffffffffffffffffffffffffff1614611bcf57611b93611ce4565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611bc69190611edf565b60405180910390fd5b565b600260015403611c0d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b508054611cf890612341565b6000825580601f10611d0a5750611d29565b601f016020900490600052602060002090810190611d289190611d87565b5b50565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b5b80821115611da0576000816000905550600101611d88565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611dcb81611db8565b8114611dd657600080fd5b50565b600081359050611de881611dc2565b92915050565b600060208284031215611e0457611e03611dae565b5b6000611e1284828501611dd9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e4682611e1b565b9050919050565b611e5681611e3b565b8114611e6157600080fd5b50565b600081359050611e7381611e4d565b92915050565b600060208284031215611e8f57611e8e611dae565b5b6000611e9d84828501611e64565b91505092915050565b611eaf81611db8565b82525050565b6000602082019050611eca6000830184611ea6565b92915050565b611ed981611e3b565b82525050565b6000602082019050611ef46000830184611ed0565b92915050565b60008060408385031215611f1157611f10611dae565b5b6000611f1f85828601611e64565b9250506020611f3085828601611e64565b9150509250929050565b611f4381611e3b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f83578082015181840152602081019050611f68565b60008484015250505050565b6000601f19601f8301169050919050565b6000611fab82611f49565b611fb58185611f54565b9350611fc5818560208601611f65565b611fce81611f8f565b840191505092915050565b611fe281611db8565b82525050565b600060a0830160008301516120006000860182611f3a565b5060208301516120136020860182611f3a565b506040830151848203604086015261202b8282611fa0565b915050606083015184820360608601526120458282611fa0565b915050608083015161205a6080860182611fd9565b508091505092915050565b6000602082019050818103600083015261207f8184611fe8565b905092915050565b600081905092915050565b50565b60006120a2600083612087565b91506120ad82612092565b600082019050919050565b60006120c382612095565b9150819050919050565b6000815190506120dc81611e4d565b92915050565b6000602082840312156120f8576120f7611dae565b5b6000612106848285016120cd565b91505092915050565b60006040820190506121246000830185611ed0565b6121316020830184611ed0565b9392505050565b600060408201905061214d6000830185611ea6565b61215a6020830184611ea6565b9392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121a382611f8f565b810181811067ffffffffffffffff821117156121c2576121c161216b565b5b80604052505050565b60006121d5611da4565b90506121e1828261219a565b919050565b600067ffffffffffffffff8211156122015761220061216b565b5b61220a82611f8f565b9050602081019050919050565b600061222a612225846121e6565b6121cb565b90508281526020810184848401111561224657612245612166565b5b612251848285611f65565b509392505050565b600082601f83011261226e5761226d612161565b5b815161227e848260208601612217565b91505092915050565b60006020828403121561229d5761229c611dae565b5b600082015167ffffffffffffffff8111156122bb576122ba611db3565b5b6122c784828501612259565b91505092915050565b6000815190506122df81611dc2565b92915050565b6000602082840312156122fb576122fa611dae565b5b6000612309848285016122d0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061235957607f821691505b60208210810361236c5761236b612312565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026123d47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612397565b6123de8683612397565b95508019841693508086168417925050509392505050565b6000819050919050565b600061241b61241661241184611db8565b6123f6565b611db8565b9050919050565b6000819050919050565b61243583612400565b61244961244182612422565b8484546123a4565b825550505050565b600090565b61245e612451565b61246981848461242c565b505050565b5b8181101561248d57612482600082612456565b60018101905061246f565b5050565b601f8211156124d2576124a381612372565b6124ac84612387565b810160208510156124bb578190505b6124cf6124c785612387565b83018261246e565b50505b505050565b600082821c905092915050565b60006124f5600019846008026124d7565b1980831691505092915050565b600061250e83836124e4565b9150826002028217905092915050565b61252782611f49565b67ffffffffffffffff8111156125405761253f61216b565b5b61254a8254612341565b612555828285612491565b600060209050601f8311600181146125885760008415612576578287015190505b6125808582612502565b8655506125e8565b601f19841661259686612372565b60005b828110156125be57848901518255600182019150602085019450602081019050612599565b868310156125db57848901516125d7601f8916826124e4565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000815461260e81612341565b61261881866125f0565b9450600182166000811461263357600181146126495761267c565b60ff19831686528115156020028601935061267c565b61265285612372565b60005b8381101561267457815481890152600182019150602081019050612655565b808801955050505b50505092915050565b600060808201905061269a6000830187611ed0565b81810360208301526126ac8186612601565b905081810360408301526126c08185612601565b90506126cf6060830184611ea6565b95945050505050565b60006126e382611f49565b6126ed81856125f0565b93506126fd818560208601611f65565b61270681611f8f565b840191505092915050565b60006080820190506127266000830187611ed0565b818103602083015261273881866126d8565b9050818103604083015261274c81856126d8565b905061275b6060830184611ed0565b9594505050505056fea26469706673582212205edcd6a6f0e3e08ce0d4361a522c4a751ef354d546f9addf9d68dbf7dd653d7f64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b1461016e5780639d7d496e14610199578063a6f9dae1146101c4578063b369f6ad146101ed578063b986eaf01461022a578063f2fde38b14610246576100b2565b806307b3acf1146100b45780631cf196df146100be5780634724da6f146100e757806369c27de0146101105780636fb1eb0c1461012c578063715018a614610157576100b2565b366100b257005b005b6100bc61026f565b005b3480156100ca57600080fd5b506100e560048036038101906100e09190611dee565b6103b5565b005b3480156100f357600080fd5b5061010e60048036038101906101099190611e79565b610444565b005b61012a60048036038101906101259190611e79565b61084f565b005b34801561013857600080fd5b506101416110f3565b60405161014e9190611eb5565b60405180910390f35b34801561016357600080fd5b5061016c6110f9565b005b34801561017a57600080fd5b5061018361110d565b6040516101909190611edf565b60405180910390f35b3480156101a557600080fd5b506101ae611136565b6040516101bb9190611eb5565b60405180910390f35b3480156101d057600080fd5b506101eb60048036038101906101e69190611e79565b611140565b005b3480156101f957600080fd5b50610214600480360381019061020f9190611efa565b611234565b6040516102219190612065565b60405180910390f35b610244600480360381019061023f9190611e79565b6114a5565b005b34801561025257600080fd5b5061026d60048036038101906102689190611e79565b611ac4565b005b610277611b4a565b600047116102b1576040517f4a247baf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004790506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516102fe906120b8565b60006040518083038185875af1925050503d806000811461033b576040519150601f19603f3d011682016040523d82523d6000602084013e610340565b606091505b505090508061037b576040517f6323686a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7e85f56592462784083e828817207817f9a8413860eb3c60e01ba90ce6f925d9826040516103a99190611eb5565b60405180910390a15050565b6103bd611b4a565b600081101561040357806040517fc6750bbc0000000000000000000000000000000000000000000000000000000081526004016103fa9190611eb5565b60405180910390fd5b806003819055507facf4d78b53f9d63cbd76ccae2aa87cc5fb45ebcb8c9bcd834dbd31b1be0bdafa816040516104399190611eb5565b60405180910390a150565b8073ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b391906120e2565b81600073ffffffffffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105b9576040517ff9fd269300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610604573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062891906120e2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070757338373ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca91906120e2565b6040517ff68670150000000000000000000000000000000000000000000000000000000081526004016106fe92919061210f565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006107e29190611cec565b6003820160006107f29190611cec565b600482016000905550503373ffffffffffffffffffffffffffffffffffffffff167f8eb13a872c0fa17489b7475219eb593e9b14b7a9f8684115ec29253460a6a8ff846040516108429190611edf565b60405180910390a2505050565b8073ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be91906120e2565b81600073ffffffffffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109c4576040517f43c971c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109cc611bd1565b8273ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b91906120e2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b1a57338373ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610add91906120e2565b6040517ff6867015000000000000000000000000000000000000000000000000000000008152600401610b1192919061210f565b60405180910390fd5b346003541115610b6557346003546040517ffb6232f6000000000000000000000000000000000000000000000000000000008152600401610b5c929190612138565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600354604051610baf906120b8565b60006040518083038185875af1925050503d8060008114610bec576040519150601f19603f3d011682016040523d82523d6000602084013e610bf1565b606091505b5050905080610c2c576040517f60dcb70a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1663fcf6c23c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ce39190612287565b81526020018573ffffffffffffffffffffffffffffffffffffffff16637d3dd5516040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d5c9190612287565b81526020018573ffffffffffffffffffffffffffffffffffffffff16637a5caab36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd091906122e5565b815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019081610ef2919061251e565b506060820151816003019081610f08919061251e565b50608082015181600401559050503373ffffffffffffffffffffffffffffffffffffffff167f4837445f6f627fb9b83ad5ff3d0a0af15d453e5044ead6a4c3d67183c25af04085600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401546040516110dd9493929190612685565b60405180910390a2506110ee611c17565b505050565b60035481565b611101611b4a565b61110b6000611c20565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b611148611b4a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111b957806040517f1c28b37b0000000000000000000000000000000000000000000000000000000081526004016111b09190611edf565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36816040516112299190611edf565b60405180910390a150565b61123c611d2c565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461137f90612341565b80601f01602080910402602001604051908101604052809291908181526020018280546113ab90612341565b80156113f85780601f106113cd576101008083540402835291602001916113f8565b820191906000526020600020905b8154815290600101906020018083116113db57829003601f168201915b5050505050815260200160038201805461141190612341565b80601f016020809104026020016040519081016040528092919081815260200182805461143d90612341565b801561148a5780601f1061145f5761010080835404028352916020019161148a565b820191906000526020600020905b81548152906001019060200180831161146d57829003601f168201915b50505050508152602001600482015481525050905092915050565b8073ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151491906120e2565b81600073ffffffffffffffffffffffffffffffffffffffff16600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361161a576040517ff9fd269300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611622611bd1565b6000600460008573ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611673573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169791906120e2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546117d590612341565b80601f016020809104026020016040519081016040528092919081815260200182805461180190612341565b801561184e5780601f106118235761010080835404028352916020019161184e565b820191906000526020600020905b81548152906001019060200180831161183157829003601f168201915b5050505050815260200160038201805461186790612341565b80601f016020809104026020016040519081016040528092919081815260200182805461189390612341565b80156118e05780601f106118b5576101008083540402835291602001916118e0565b820191906000526020600020905b8154815290600101906020018083116118c357829003601f168201915b5050505050815260200160048201548152505090503481608001511115611944573481608001516040517ffb6232f600000000000000000000000000000000000000000000000000000000815260040161193b929190612138565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff163460405161196a906120b8565b60006040518083038185875af1925050503d80600081146119a7576040519150601f19603f3d011682016040523d82523d6000602084013e6119ac565b606091505b50509050806119e7576040517f8421543500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16637710bcfb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5691906120e2565b73ffffffffffffffffffffffffffffffffffffffff167fffc1a05fed963bf870689da19756ad79b1fbb83e344ea31fdd528ec62293004a83602001518460400151856060015133604051611aad9493929190612711565b60405180910390a25050611abf611c17565b505050565b611acc611b4a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b3e5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611b359190611edf565b60405180910390fd5b611b4781611c20565b50565b611b52611ce4565b73ffffffffffffffffffffffffffffffffffffffff16611b7061110d565b73ffffffffffffffffffffffffffffffffffffffff1614611bcf57611b93611ce4565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611bc69190611edf565b60405180910390fd5b565b600260015403611c0d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b508054611cf890612341565b6000825580601f10611d0a5750611d29565b601f016020900490600052602060002090810190611d289190611d87565b5b50565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b5b80821115611da0576000816000905550600101611d88565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611dcb81611db8565b8114611dd657600080fd5b50565b600081359050611de881611dc2565b92915050565b600060208284031215611e0457611e03611dae565b5b6000611e1284828501611dd9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e4682611e1b565b9050919050565b611e5681611e3b565b8114611e6157600080fd5b50565b600081359050611e7381611e4d565b92915050565b600060208284031215611e8f57611e8e611dae565b5b6000611e9d84828501611e64565b91505092915050565b611eaf81611db8565b82525050565b6000602082019050611eca6000830184611ea6565b92915050565b611ed981611e3b565b82525050565b6000602082019050611ef46000830184611ed0565b92915050565b60008060408385031215611f1157611f10611dae565b5b6000611f1f85828601611e64565b9250506020611f3085828601611e64565b9150509250929050565b611f4381611e3b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f83578082015181840152602081019050611f68565b60008484015250505050565b6000601f19601f8301169050919050565b6000611fab82611f49565b611fb58185611f54565b9350611fc5818560208601611f65565b611fce81611f8f565b840191505092915050565b611fe281611db8565b82525050565b600060a0830160008301516120006000860182611f3a565b5060208301516120136020860182611f3a565b506040830151848203604086015261202b8282611fa0565b915050606083015184820360608601526120458282611fa0565b915050608083015161205a6080860182611fd9565b508091505092915050565b6000602082019050818103600083015261207f8184611fe8565b905092915050565b600081905092915050565b50565b60006120a2600083612087565b91506120ad82612092565b600082019050919050565b60006120c382612095565b9150819050919050565b6000815190506120dc81611e4d565b92915050565b6000602082840312156120f8576120f7611dae565b5b6000612106848285016120cd565b91505092915050565b60006040820190506121246000830185611ed0565b6121316020830184611ed0565b9392505050565b600060408201905061214d6000830185611ea6565b61215a6020830184611ea6565b9392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121a382611f8f565b810181811067ffffffffffffffff821117156121c2576121c161216b565b5b80604052505050565b60006121d5611da4565b90506121e1828261219a565b919050565b600067ffffffffffffffff8211156122015761220061216b565b5b61220a82611f8f565b9050602081019050919050565b600061222a612225846121e6565b6121cb565b90508281526020810184848401111561224657612245612166565b5b612251848285611f65565b509392505050565b600082601f83011261226e5761226d612161565b5b815161227e848260208601612217565b91505092915050565b60006020828403121561229d5761229c611dae565b5b600082015167ffffffffffffffff8111156122bb576122ba611db3565b5b6122c784828501612259565b91505092915050565b6000815190506122df81611dc2565b92915050565b6000602082840312156122fb576122fa611dae565b5b6000612309848285016122d0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061235957607f821691505b60208210810361236c5761236b612312565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026123d47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612397565b6123de8683612397565b95508019841693508086168417925050509392505050565b6000819050919050565b600061241b61241661241184611db8565b6123f6565b611db8565b9050919050565b6000819050919050565b61243583612400565b61244961244182612422565b8484546123a4565b825550505050565b600090565b61245e612451565b61246981848461242c565b505050565b5b8181101561248d57612482600082612456565b60018101905061246f565b5050565b601f8211156124d2576124a381612372565b6124ac84612387565b810160208510156124bb578190505b6124cf6124c785612387565b83018261246e565b50505b505050565b600082821c905092915050565b60006124f5600019846008026124d7565b1980831691505092915050565b600061250e83836124e4565b9150826002028217905092915050565b61252782611f49565b67ffffffffffffffff8111156125405761253f61216b565b5b61254a8254612341565b612555828285612491565b600060209050601f8311600181146125885760008415612576578287015190505b6125808582612502565b8655506125e8565b601f19841661259686612372565b60005b828110156125be57848901518255600182019150602085019450602081019050612599565b868310156125db57848901516125d7601f8916826124e4565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000815461260e81612341565b61261881866125f0565b9450600182166000811461263357600181146126495761267c565b60ff19831686528115156020028601935061267c565b61265285612372565b60005b8381101561267457815481890152600182019150602081019050612655565b808801955050505b50505092915050565b600060808201905061269a6000830187611ed0565b81810360208301526126ac8186612601565b905081810360408301526126c08185612601565b90506126cf6060830184611ea6565b95945050505050565b60006126e382611f49565b6126ed81856125f0565b93506126fd818560208601611f65565b61270681611f8f565b840191505092915050565b60006080820190506127266000830187611ed0565b818103602083015261273881866126d8565b9050818103604083015261274c81856126d8565b905061275b6060830184611ed0565b9594505050505056fea26469706673582212205edcd6a6f0e3e08ce0d4361a522c4a751ef354d546f9addf9d68dbf7dd653d7f64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/FileMarketplace.sol:FileMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/FileMarketplace.sol:FileMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 342,
        "contract": "contracts/FileMarketplace.sol:FileMarketplace",
        "label": "fileMarketplaceOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 344,
        "contract": "contracts/FileMarketplace.sol:FileMarketplace",
        "label": "commissionFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 351,
        "contract": "contracts/FileMarketplace.sol:FileMarketplace",
        "label": "listings",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)266_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)266_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct FileMarketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Listing)266_storage)"
      },
      "t_mapping(t_address,t_struct(Listing)266_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FileMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)266_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Listing)266_storage": {
        "encoding": "inplace",
        "label": "struct FileMarketplace.Listing",
        "members": [
          {
            "astId": 257,
            "contract": "contracts/FileMarketplace.sol:FileMarketplace",
            "label": "fileTokenOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 259,
            "contract": "contracts/FileMarketplace.sol:FileMarketplace",
            "label": "fileToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 261,
            "contract": "contracts/FileMarketplace.sol:FileMarketplace",
            "label": "fileName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 263,
            "contract": "contracts/FileMarketplace.sol:FileMarketplace",
            "label": "fileSymbol",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 265,
            "contract": "contracts/FileMarketplace.sol:FileMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}