{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/FileMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"./interfaces/IFileToken.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n// This contract is for file trading\n// The owner of the file can list the fileToken for those who want to buy to mint the NFT for the file\n// The owner of the file can also cancel the listing\n// Provide an interface where users can see details about the file and mint NFTs directly from the `FileToken` contract by paying the minting fee.\n// This contract can track the ownership and transaction history of each NFT minted from the `FileToken` contracts.\n// This information can be used to display the history and provenance of each file token.\n// This contract owner will earn a commission\n// -> the owner of this contract can set the commission fee:\n// -> the owner of this contract can withdraw the commission fee\n// -> the owner of this contract can change the commission fee\n// -> the owner of this contract can change the owner of the contract\n// This contract only deployed by the marketplace owner\n// Those fileToken owners can call the listFileToken function to list their fileToken contracts\n// Those fileToken owners can call the cancelListing function to cancel the listing\n// Only the owner of the marketplace can interact with other functions\n\n// ReentrancyGuard is needed to prevent reentrancy attack\n\ncontract FileMarketplace is Ownable, ReentrancyGuard {\n    struct Listing {\n        address fileTokenOwner;\n        address fileToken;\n        string fileName;\n        string fileSymbol;\n        uint256 price;\n    }\n\n    error FileMarketplace__NotFileTokenCreator(address caller, address creator);\n    error FileMarketplace__NotEnoughFee(uint256 fee, uint256 price);\n    error FileMarketplace__InvalidCommissionFee(uint256 newCommissionFee);\n    error FileMarketplace__NoProceedsForWithdraw();\n    error FileMarketplace__WithdrawFailed();\n    error FileMarketplace__BoughtFailed();\n    error FileMarketplace__ListFailed();\n    error FileMarketplace__FileTokenNotListed();\n    error FileMarketplace__FileTokenAlreadyListed();\n\n    event FileTokenListed(\n        address indexed fileTokenOwner,\n        address fileToken,\n        string fileName,\n        string fileSymbol,\n        uint256 price\n    );\n    event FileTokenListingCancelled(\n        address indexed fileTokenOwner,\n        address fileToken\n    );\n    event FileTokenBought(\n        address indexed fileTokenOwner,\n        address fileToken,\n        string fileName,\n        string fileSymbol,\n        address buyer\n    );\n    event CommissionFeeChanged(uint256 newCommissionFee);\n    event ProceedsWithdrawn(uint256 amount);\n    event OwnerChanged(address newFileMarketplaceOwner);\n\n    address private fileMarketplaceOwner;\n    uint256 public commissionFee;\n    mapping(address => mapping(address => Listing)) private listings; // one owner can have multiple listings => fileTokenOwner => fileToken => Listing\n\n    modifier isListed(address fileTokenOwnerAddress, address fileTokenAddress) {\n        if (\n            listings[fileTokenOwnerAddress][fileTokenAddress].fileToken ==\n            address(0)\n        ) {\n            revert FileMarketplace__FileTokenNotListed();\n        }\n        _;\n    }\n\n    modifier isNotListed(\n        address fileTokenOwnerAddress,\n        address fileTokenAddress\n    ) {\n        if (\n            listings[fileTokenOwnerAddress][fileTokenAddress].fileToken !=\n            address(0)\n        ) {\n            revert FileMarketplace__FileTokenAlreadyListed();\n        }\n        _;\n    }\n\n    constructor(uint256 _commissionFee) Ownable(msg.sender) {\n        fileMarketplaceOwner = msg.sender;\n        commissionFee = _commissionFee;\n    }\n\n    function listFileToken(\n        address fileTokenAddress\n    )\n        public\n        payable\n        isNotListed(\n            IFileToken(payable(fileTokenAddress)).creatorOfContract(),\n            fileTokenAddress\n        )\n        nonReentrant\n    {\n        if (\n            msg.sender !=\n            IFileToken(payable(fileTokenAddress)).creatorOfContract()\n        ) {\n            revert FileMarketplace__NotFileTokenCreator(\n                msg.sender,\n                IFileToken(payable(fileTokenAddress)).creatorOfContract()\n            );\n        }\n\n        if (commissionFee > msg.value) {\n            revert FileMarketplace__NotEnoughFee(msg.value, commissionFee);\n        }\n\n        (bool success, ) = payable(address(this)).call{value: msg.value}(\"\");\n        if (!success) {\n            revert FileMarketplace__ListFailed();\n        }\n\n        listings[msg.sender][fileTokenAddress] = Listing({\n            fileTokenOwner: msg.sender,\n            fileToken: fileTokenAddress,\n            fileName: IFileToken(payable(fileTokenAddress)).getFileName(),\n            fileSymbol: IFileToken(payable(fileTokenAddress)).getFileSymbol(),\n            price: IFileToken(payable(fileTokenAddress)).getMintFee()\n        });\n\n        emit FileTokenListed(\n            msg.sender,\n            fileTokenAddress,\n            listings[msg.sender][fileTokenAddress].fileName,\n            listings[msg.sender][fileTokenAddress].fileSymbol,\n            listings[msg.sender][fileTokenAddress].price\n        );\n    }\n\n    function cancelListing(\n        address fileTokenAddress\n    )\n        public\n        isListed(\n            IFileToken(payable(fileTokenAddress)).creatorOfContract(),\n            fileTokenAddress\n        )\n    {\n        if (\n            msg.sender !=\n            IFileToken(payable(fileTokenAddress)).creatorOfContract()\n        ) {\n            revert FileMarketplace__NotFileTokenCreator(\n                msg.sender,\n                IFileToken(payable(fileTokenAddress)).creatorOfContract()\n            );\n        }\n\n        delete listings[msg.sender][fileTokenAddress];\n\n        emit FileTokenListingCancelled(msg.sender, fileTokenAddress);\n    }\n\n    function buyFileToken(\n        address fileTokenAddress\n    )\n        public\n        payable\n        isListed(\n            IFileToken(payable(fileTokenAddress)).creatorOfContract(),\n            fileTokenAddress\n        )\n        nonReentrant\n    {\n        Listing memory listing = listings[\n            IFileToken(payable(fileTokenAddress)).creatorOfContract()\n        ][fileTokenAddress];\n        if (listing.price > msg.value) {\n            revert FileMarketplace__NotEnoughFee(msg.value, listing.price);\n        }\n\n        // call the receive function of the fileToken contract and it will automatically mint the NFT\n        (bool success, ) = payable(fileTokenAddress).call{value: msg.value}(\n            abi.encodeWithSignature(\"mintNFT(address)\", msg.sender)\n        );\n        if (!success) {\n            revert FileMarketplace__BoughtFailed();\n        }\n\n        emit FileTokenBought(\n            IFileToken(payable(fileTokenAddress)).creatorOfContract(),\n            listing.fileToken,\n            listing.fileName,\n            listing.fileSymbol,\n            msg.sender\n        );\n    }\n\n    function changeCommissionFee(uint256 newCommissionFee) public onlyOwner {\n        if (newCommissionFee < 0) {\n            revert FileMarketplace__InvalidCommissionFee(newCommissionFee);\n        }\n        commissionFee = newCommissionFee;\n        emit CommissionFeeChanged(newCommissionFee);\n    }\n\n    function withdrawCommissionFee() public payable onlyOwner {\n        if (address(this).balance <= 0) {\n            revert FileMarketplace__NoProceedsForWithdraw();\n        }\n        uint256 balance = address(this).balance;\n        (bool success, ) = fileMarketplaceOwner.call{value: balance}(\"\");\n        if (!success) {\n            revert FileMarketplace__WithdrawFailed();\n        }\n        emit ProceedsWithdrawn(balance);\n    }\n\n    function changeOwner(address newFileMarketplaceOwner) public onlyOwner {\n        fileMarketplaceOwner = newFileMarketplaceOwner;\n        Ownable.transferOwnership(newFileMarketplaceOwner);\n        emit OwnerChanged(newFileMarketplaceOwner);\n    }\n\n    function getCommissionFee() public  returns (uint256) {\n        return commissionFee;\n    }\n\n    function getListing(\n        address fileTokenOwner,\n        address fileToken\n    ) public view returns (Listing memory) {\n        return listings[fileTokenOwner][fileToken];\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}\n"
    },
    "contracts/interfaces/IFileToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IFileToken {\n    // Function to mint an NFT for a file\n    function mintNFT(address _to) external payable;\n\n    // Function to change the minting fee\n    function changeMintFee(uint256 newMintFee) external;\n\n    // Function to withdraw the contract's balance\n    function withdraw() external;\n\n    // Function to get the token URI of a minted NFT\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n\n    // Function to get the minting fee\n    function getMintFee() external view returns (uint256);\n\n    // Fucntion to get the file name\n    function getFileName() external view returns (string memory);\n\n    // Function to get the file symbol\n    function getFileSymbol() external view returns (string memory);\n\n    // Function to get the creator of the contract\n    function creatorOfContract() external view returns (address);\n\n    // Function for receiving Ether\n    receive() external payable;\n\n    // Function for fallback\n    fallback() external payable;\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}